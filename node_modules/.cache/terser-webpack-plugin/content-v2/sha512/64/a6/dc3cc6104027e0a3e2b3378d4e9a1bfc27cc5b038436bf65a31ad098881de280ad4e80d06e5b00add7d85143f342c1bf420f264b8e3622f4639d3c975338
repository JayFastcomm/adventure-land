{"code":"window.bots=function(t){var e={};function r(n){if(e[n])return e[n].exports;var a=e[n]={i:n,l:!1,exports:{}};return t[n].call(a.exports,a,a.exports,r),a.l=!0,a.exports}return r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(t,\"__esModule\",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&\"object\"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,\"default\",{enumerable:!0,value:t}),2&e&&\"string\"!=typeof t)for(var a in t)r.d(n,a,function(e){return t[e]}.bind(null,a));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,\"a\",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p=\"\",r(r.s=7)}([function(t,e,r){\"use strict\";r.d(e,\"a\",(function(){return n}));const n=\"bee\"},function(t,e,r){\"use strict\";r.d(e,\"a\",(function(){return n}));const n={bee:{priority:300},crab:{priority:100},goo:{priority:500},osnake:{priority:1},snake:{priority:1},squig:{priority:1},squigtoad:{priority:1}}},function(t,e,r){\"use strict\";r.d(e,\"a\",(function(){return n}));const n=t=>parent.entities[t]},,,,,function(t,e,r){\"use strict\";r.r(e),r.d(e,\"Warrior\",(function(){return l}));var n=r(0),a=r(1),s=r(2),i={entities:[]},o={addItem(t,e){t.commit(\"addItem\",e)},viewItem(t,e){t.commit(\"viewItem\",e)}},c={addItem:(t,e)=>(t.entities.push(e),t),updateItem(t,e){t.entities[e.monster.id]=e},viewItem:(t,e)=>(t.entities[e],t)};class u{constructor(){this.events={}}subscribe(t,e){let r=this;return r.events.hasOwnProperty(t)||(r.events[t]=[]),r.events[t].push(e)}publish(t,e={}){return this.events.hasOwnProperty(t)?this.events[t].map(t=>t(e)):[]}}var h=new class{constructor(t){let e=this;e.actions={},e.mutations={},e.state={},e.status=\"resting\",e.events=new u,t.hasOwnProperty(\"actions\")&&(e.actions=t.actions),t.hasOwnProperty(\"mutations\")&&(e.mutations=t.mutations),e.state=new Proxy(t.state||{},{set:function(t,r,n){return t[r]=n,console.log(`stateChange: ${r}: ${n}`),e.events.publish(\"stateChange\",e.state),\"mutation\"!==e.status&&console.warn(\"You should use a mutation to set \"+r),e.status=\"resting\",!0}})}dispatch(t,e){return\"function\"!=typeof this.actions[t]?(console.error(`Action \"${t} doesn't exist.`),!1):(console.groupCollapsed(\"ACTION: \"+t),this.status=\"action\",this.actions[t](this,e),console.groupEnd(),!0)}commit(t,e){if(\"function\"!=typeof this.mutations[t])return console.log(`Mutation \"${t}\" doesn't exist`),!1;this.status=\"mutation\";let r=this.mutations[t](this.state,e);return this.state=Object.assign(this.state,r),!0}}({actions:o,mutations:c,state:i});class l{constructor(){this.state=i,this.store=h,this.ticks=1,this.mainTarget=n.a,this.minTargetDistance=100,this.targetPriority=a.a,this.attackMode=!0,this.filterCriteria=\"mtype\",this.targetMaxRange=4,this.targets=[\"goo\"];const t=get_socket();game_log(\"in constructor\"),t.on(\"entities\",t=>{this.processSocketData(t)})}mainLoop(){game_log(\"main loop\"),character.on(\"incoming\",t=>{this.attack(t.actor)}),setInterval(()=>{console.log(i.entities),console.log(i.entities.map(t=>Object.keys(t))),this.attackMode&&!parent.character.rip&&(this.detectMainTarget(),use_hp_or_mp(),loot())},Math.max(5e3,parent.character.ping))}detectMainTarget(){}attack(t){this.currentTarget=t?Object(s.a)(t):this.currentTarget,this.currentTarget&&(game_log(\"attacking: \"+this.currentTarget.id),is_in_range(this.currentTarget,\"attack\")||is_moving(parent.character)?can_attack(this.currentTarget)&&(set_message(\"Attacking\"),attack(this.currentTarget).then(t=>{game_log(\"success attack\"),reduce_cooldown(\"attack\",Math.max(250,parent.character.ping))},t=>{game_log(\"error: \"+t.reason)})):this.moveLoop())}moveLoop(){can_move_to(this.currentTarget.real_x,this.currentTarget.real_y)&&xmove(parent.character.real_x+(this.currentTarget.real_x-parent.character.real_x),parent.character.real_y+(this.currentTarget.real_y-parent.character.real_y))}allDocuments(){show_json(i)}processSocketData(t){t.monsters.forEach(t=>{switch(game_log(\"incoming monsterId: \"+t.id),game_log(\"current entities in state: \"+i.entities.length),i.entities[t.id]){case!0:return game_log(\"exsists, updating \"+t.id),this.store.dispatch(\"updateItem\",{[t.id]:t});default:return game_log(\"new record adding \"+t.id),this.store.dispatch(\"addItem\",{[t.id]:t})}})}}(new l).mainLoop()}]);","extractedComments":[]}